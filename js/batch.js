var Batch = Batch || { };

// called when the gui params change and we need to update mesh
Batch.particleSystemChangeCallback = function ( InputSettings ) {
    var i;

    // Start game engine
    GameEngine.start();

    // If we specified animated model, then lets load it first
    if ( InputSettings.animatedModelName ) {
        var loader = new THREE.JSONLoader( true );
        loader.load( InputSettings.animatedModelName, InputSettings.animationLoadFunction );
    }

    // Create new system
    var initializer = new InputSettings.initializerFunction ( InputSettings.initializerSettings );
    var updater     = new InputSettings.updaterFunction ( InputSettings.updaterSettings );
    var emitter     = new Emitter( {
        maxParticles:  InputSettings.maxParticles,   // how many particles can be generated by this emitter?
        particlesFreq: InputSettings.particlesFreq,  // how many particle per second will we emit?
        initialize:    initializer,                  // initializer object
        update:        updater,                      // updater object
        material:      InputSettings.particleMaterial,
        cloth:         InputSettings.cloth,
        width:         InputSettings.width,
        height:        InputSettings.height,
    } );
    if ( !InputSettings.cloth ) {
        // If we are not dealing with cloth, lets sort particles
        emitter.enableSorting( Batch.cmds.sorting );
    }
    GameEngine.createEmitter(emitter);

    // Create the scene
    InputSettings.createScene();
};

Batch.parseUrl = function() {
    var url  = document.URL;
    var cmds = Parser.getCommands(url);

    Batch.selectedSystem = cmds[0].system;
    Batch.cmds = cmds[0];
};


// when HTML is finished loading, do this
window.onload = function() {
    Student.updateHTML();

    // Setup renderer, scene and gui
    Scene.create();
    Batch.parseUrl();
    Gui.values.windowSize = Batch.cmds.size;
    Renderer.create( Scene, document.getElementById("canvas") );
    Renderer.onWindowResize();
    InputManager.initialize();

    // Set up scene
    Batch.particleSystemChangeCallback( SystemSettings[Batch.selectedSystem] );

    if (Batch.selectedSystem !== 'cloth') {
        var emitters = ParticleEngine.getEmitters();
        for ( var i = 0 ; i < emitters.length ; i++ ) {
            emitters[i]._material.uniforms.texture.value = new THREE.ImageUtils.loadTexture( 'images/' + Batch.cmds.texture + '.png' );
            emitters[i]._material.depthTest = (Batch.cmds.depthTest === 'true');
            emitters[i]._material.transparent = (Batch.cmds.transparent === 'true');
            emitters[i]._sorting = (Batch.cmds.sorting === 'true');

            var blendType;
            if ( Batch.cmds.blending === "Normal" ) {
                blendType = THREE.NormalBlending;
            } else if ( Batch.cmds.blending === "Additive" ) {
                blendType = THREE.AdditiveBlending;
            } else {
                console.log( "Blend type unknown!" );
                return;
            }
            emitters[i]._material.blending = blendType;
            emitters[i]._material.needsUpdate  = true;
        }
    }

    GameEngine.mainLoop();
};


