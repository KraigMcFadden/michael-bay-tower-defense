function Explosion(position, kwargs)
{
    if (kwargs === undefined)
    {
        kwargs = {};
    }
    // optional arguments
    kwargs = setDefault(kwargs, "baseColor", new THREE.Vector4(0.9, 0.5, 0.0, 1.0));
    kwargs = setDefault(kwargs, "magColor", new THREE.Vector3(1.0, 1.0, 0.0));
    kwargs = setDefault(kwargs, "explosionSpeed", 200);
    kwargs = setDefault(kwargs, "particleLifetime", 1);
    kwargs = setDefault(kwargs, "size", 6);
    kwargs = setDefault(kwargs, "maxParticles", 10000);
    kwargs = setDefault(kwargs, "particleFreq", 5000);
    kwargs = setDefault(kwargs, "explosionLifespan", 500);





    var initalizeSettings = {
        sphere: new THREE.Vector4(position.x, position.y, position.z, 1.0),
        baseColor: kwargs.baseColor,
        magColor: kwargs.magColor,
        velocity: new THREE.Vector3(0.0, 0.0, 0.0),
        explosionSpeed: kwargs.explosionSpeed,
        damping: new THREE.Vector3(0.0, 0, 0), // (linear coeff, quadratic coeff, not in use )
        lifetime: kwargs.particleLifetime,
        size: kwargs.size,
    };

    var updateSettings = {
        externalForces: {
            gravity: new THREE.Vector3(0, 0, 0),
            attractors: [],
        },
        collidables: {},
    }

    var initializer = new ExplosionInitializer(initalizeSettings);
    var updater = new EulerUpdater(updateSettings);

    var emitter = new Emitter({
        maxParticles: kwargs.maxParticles,   // how many particles can be generated by this emitter?
        particlesFreq: kwargs.particleFreq,  // how many particle per second will we emit?
        initialize: initializer,                  // initializer object
        update: updater,                      // updater object
        material: SystemSettings.standardMaterial,
        cloth: SystemSettings.standardMaterial,
        lifespan: kwargs.explosionLifespan,
        width: 20,
        height: 20,
    });

    return emitter;
}